#!/bin/bash
APKTOOL=
SIGNAPK=
PUPLIC_KEY=
PRIVATE_KEY=

VERSION=2.4

usage() {
	echo "Twelve v$VERSION - a tiny wrapper for ApkTool, SignApk & ADB."
	echo `date`
	echo "Written by A\$teroid <acroreiser@gmail.com>"
	echo ""
    echo "Usage:"
	echo ""
	echo "Decompile operations:"
	echo "	twelve -d [-R|-S|-g|-f] <file> - decompile apk/jar-file."
	echo "	-R             Do not decode resources."
	echo "	-S             Do not decode sources."
	echo "	-g             Init GIT repository for easily changes tracking."
	echo "	-f             Force delete destination directory."
	echo ""
	echo "Applying patches:"
	echo "	twelve -p </path/to/patch> [-r|-f|-Y] <file> - decompile apk/jar-file."
	echo "	-r             Revert patch."
	echo "	-f             Force overwrite destination directory."
	echo "	-Y             Make system APK or JAR file."
	echo ""
	echo "Build operations:"
	echo "	twelve -c [-f|-Y] <path_to_decompiled> - compile apk-file."
	echo "	-f             Skip changes detection and forcefully build all files."
	echo "	-Y             Make system APK or JAR file."
	echo ""
	echo "	twelve -b [-f|-Y] <path_to_decompiled> - compile & sign apk-file."
	echo ""
	echo "Install operations:"
	echo "	twelve -I [-f|-Y] <path_to_decompiled> - compile, sign & install apk-file on connected via USB (ADB) device."
	echo "	twelve -i <apk_file> - install apk-file on connected via USB (ADB) device."
	echo ""
	echo "	twelve -F <framework_apk> - install framework apk-file for ApkTool."
	echo ""
	echo "Misc operations:"
	echo "	twelve -s <apk_file> - sign apk-file."
	echo ""
	echo "	-m <heapsize>  Set Java heapsize(in megabytes) for operation (512 by default)" 
	echo "	-l			   Write log to twelve.log" 
	echo "	-B			   Bypass pre-compilation checks"
}

# Install framework resources
# It's needed for {de}compilation Android packages
framework_install() {
	echo "Framework: $input_file" >> $LOG
	java -jar -Xmx${MEM}m $APKTOOL if $input_file  &>> $LOG
	
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Framework: $input_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Framework $input_file failed!" >> $LOG
		echo
		exit 1
	fi
}

# Decompile package
decompile() {
	apkjar=$(echo $input_file | awk -F. '{print $NF}')
	output_file=$(echo $input_file | sed s/.$apkjar//)

	echo "Decompile: $input_file" >> $LOG
	java -jar -Xmx${MEM}m $APKTOOL d -o $output_file $src $force $res $input_file  &>> $LOG

	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Decompile: $input_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"

	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Decompiling $apkjar failed!" >> $LOG
		echo
		exit 1
	fi
	
	if [ "$GIT" = "yes" ]; then
		echo
		workingdir=$(pwd)
		echo "Initializing git repository..."
    	git init $output_file &>>$LOG
		cd $output_file
		git add .
		git commit -m "init" &>>$LOG
		cd $workingdir
	fi
}

# Check source directory before compilation
check() {
	if [ ! -f "${input_file}/apktool.yml" ]; then
		echo -en "	\\033[1;31mWrong decompiled apk|jar directory!`$SETCOLOR_NORMAL`"
		echo
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
		filename=$(cat ${input_file}/apktool.yml | grep apkFileName | awk '{print $2}')
		if [ -z "$filename" ]; then
			echo -en "	\\033[1;31mWrong decompiled apk|jar directory!`$SETCOLOR_NORMAL`"
			echo
			SETSTATUS=$SETCOLOR_FAILURE
		fi

		if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
			apkjar=$(echo $filename | awk -F. '{print $NF}')

			if [ "$apkjar" = "apk" ] && [ ! -f "${input_file}/AndroidManifest.xml" ]; then
				echo -en "	\\033[1;31mAndroid PacKage must have the AndroidManifest.xml!`$SETCOLOR_NORMAL`"
				echo
				SETSTATUS=$SETCOLOR_FAILURE
			fi
			
			if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
			
				if [ "$apkjar" = "apk" ] && [ ! -d "${input_file}/res"  ]; then
					echo -en "	\\033[1;33mAPK doesn't have resources?`$SETCOLOR_NORMAL`"
					echo
					if [ "$force" = "-f" ]; then
						echo -en "	\\033[1;33mProceeding forcefully...`$SETCOLOR_NORMAL`"
						echo
						SETSTATUS=$SETCOLOR_WARNING
					else
						echo "Use [-f] to proceed anyway"
						SETSTATUS=$SETCOLOR_FAILURE
					fi
				fi
				
				if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
					if [ "$apkjar" = "apk" ] && [ ! -d "${input_file}/smali"  ]; then
						echo -en "	\\033[1;33mAPK doesn't have sources!`$SETCOLOR_NORMAL`"
						echo
						echo "	Maybe it's framework-res or overlay?"
						SETSTATUS=$SETCOLOR_WARNING
					fi
	
					if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
					
						if [ "$apkjar" = "jar" ] && [ ! -d "${input_file}/smali"  ]; then
							echo -en "	\\033[1;33mJAR doesn't have code?`$SETCOLOR_NORMAL`"
							echo
							if [ "$force" = "-f" ]; then
								echo -en "	\\033[1;33mProceeding forcefully...`$SETCOLOR_NORMAL`"
								echo
								SETSTATUS=$SETCOLOR_WARNING
							else
								echo "Use [-f] to proceed anyway"
								SETSTATUS=$SETCOLOR_FAILURE
							fi
						fi
					fi
				fi
			fi
		fi
	fi
	
	echo -n "   Checking source directory  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	echo
	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		exit 1
	fi
}

# Just compile package
compile() {
	source_dir=$input_file
	output_file=$(echo $input_file/$filename)
	
	echo "Source: $input_file"
	echo "Source: $input_file" >> $LOG
	echo "Compile $apkjar: $output_file" >> $LOG

	java -jar -Xmx${MEM}m $APKTOOL b $force $input_file -o $output_file  &>> $LOG
	
	if [ $? -eq 0 ]; then
		SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi

	echo -n "   Compile $apkjar: $output_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"

	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Compiling $apkjar failed!" >> $LOG
		echo
		exit 1
	fi
	
	if [ "$mksysapk" = "yes" ]; then
		echo "System $apkjar: $input_file" >> $LOG
		mkdir ${output_file%/*}/sys &>>/dev/null
		cp -a $output_file ${output_file%/*}/sys/$filename
		7za a -tzip ${output_file%/*}/sys/$filename ${output_file%/*}/original/* &>> $LOG

		if [ $? -eq 0 ]; then
			SETSTATUS=$SETCOLOR_SUCCESS
		else
			SETSTATUS=$SETCOLOR_FAILURE
		fi
	
		echo -n "   System $apkjar: ${output_file%/*}/sys/$filename  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
		if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
			echo "  Creating system $apkjar failed!" >> $LOG
			echo
		fi
	fi
}

# Just sign file with testkey
sign() {	
	filename=$(echo $input_file | awk -F. '{print $NF}')
	output_file=$(echo $input_file | sed s/.$filename/-signed.$filename/)
	
	echo "Sign: $input_file" >> $LOG
	java -jar -Xmx${MEM}m $SIGNAPK $PUPLIC_KEY $PRIVATE_KEY $input_file $output_file  2>> $LOG
	
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Sign: $output_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Signing failed!" >> $LOG
		echo
		exit 3
	fi
}

# Compile and sign file
build() {
	echo "Build: $input_file" >> $LOG
	
	compile
	echo
	input_file=$output_file
	sign
	echo
	input_file=$output_file
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	filename=$(cat ${source_dir}/apktool.yml | grep apkFileName | awk '{print $2}')
	cp -a $input_file $source_dir/..
	rm -f $source_dir/$filename
	mv $input_file $source_dir/$filename
	echo -n "   Build: $(readlink -f $source_dir/../$filename)  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
}

# Compile, sign and install apk on connected via ADB device
build_install() {
	echo "Build + Install: $input_file" >> $LOG
	build
	install_apk
}

# Just install file on connected via ADB device (root access needed for adb)
install_apk() {
	echo "Install: $input_file" >> $LOG
	
	sudo adb install -r -d $input_file &>> $LOG
	
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Install: $input_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
}

apply_patch_apk() {
wdir=$(pwd)
cd $output_file
if [ "$REVERT" = "yes" ]; then
	echo "Reverting $diff_file"
	rev="-Rp1"
else
	echo "Applying $diff_file"
	rev="-Np1"
fi
patch $rev --dry-run -t -i $diff_file &>> $LOG
if [ $? -eq 0 ]; then
   	SETSTATUS=$SETCOLOR_SUCCESS
	echo -n "   Checking...  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	echo
	echo "-----"
	patch $rev --no-backup-if-mismatch -t -i $diff_file
	if [ $? -eq 0 ]; then
		echo "-----"
		echo -en "\\033[1;32mSuccess!\\033[0;39m"
		echo
	else
		echo "-----"
		echo -en "\\033[1;31mFailed.\\033[0;39m"
		echo
		cd $wdir
		rm -fr $output_file
		exit 1
	fi
	cd $wdir
else
	SETSTATUS=$SETCOLOR_FAILURE
	echo -n "   Checking...  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	cd $wdir
	rm -fr $output_file
	echo
	exit 1
fi
}

patch_apk() {
decompile
echo
apply_patch_apk
echo "Building patched file..."
input_file=$output_file
check
compile 
input_file=$output_file
sign
if [ $? -eq 0 ]; then
 	SETSTATUS=$SETCOLOR_SUCCESS
else
	SETSTATUS=$SETCOLOR_FAILURE
fi
echo
input_file=$output_file

filename=$(cat ${source_dir}/apktool.yml | grep apkFileName | awk '{print $2}')
mv $input_file $source_dir/$filename
echo -n "Patch: $(readlink -f $source_dir/$filename)  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
}


# !!!! Entering TwelVe. !!!!
SETCOLOR_SUCCESS="echo -en \\033[1;32mOK"
SETCOLOR_FAILURE="echo -en \\033[1;31mERR"
SETCOLOR_WARNING="echo -en \\033[1;33mWARN"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETSTATUS=$SETCOLOR_SUCCESS

# Preparing to work
OPERATION=
MEM=512
bypass_check="no"



while getopts "hdRrglp:fvBSm:cbYsIiF" opt
do
case $opt in
	h) usage; exit 0;;
	v) echo $VERSION; exit 0;;
	R) res="-r";;
	S) src="-s";;
	Y) mksysapk="yes";;
	f) force="-f";;
	B) bypass_check="yes";;
	r) REVERT="yes";;
	g) GIT="yes";;
	l) LOGGING="yes";;
	m) MEM=$OPTARG;;
	F) OPERATION=framework_install;;
	p) OPERATION=patch_apk; diff_file=$OPTARG;;
	b) OPERATION=build;;
	c) OPERATION=compile;;
	I) OPERATION=build_install;;
	i) OPERATION=install_apk;;
	s) OPERATION=sign;;
	d) OPERATION=decompile;;
	*) usage; exit 0;;
esac
done

if [ "$#" -lt "2" ]; then
	usage
	exit 0
fi

echo "Twelve v$VERSION - a tiny wrapper for ApkTool, SignApk & ADB."
echo `date`

if [ "$LOGGING" = "yes" ]; then
	LOG="$(pwd)/twelve.log"
else
	LOG="/dev/null"
fi
	
input_file=$(readlink -f ${@: -1} 2>>$LOG)

if [ -f "$input_file" ]; then
	if [ "$OPERATION" = "compile" ] || [ "$OPERATION" = "build" ] || [ "$OPERATION" = "build_install" ]; then
		echo -en "\\033[1;31mBuild/compile operations needs decompiled file directory!`$SETCOLOR_NORMAL`"
		echo
		exit 1
	else 
		if [ "$OPERATION" = "install_apk" ] || [ "$OPERATION" = "framework_install" ] || [ "$OPERATION" = "build_install" ] ; then
			if [ "$(echo $input_file | awk -F. '{print $NF}')" = "jar" ] || [ "$(echo $input_file | awk -F. '{print $NF}')" = "JAR" ]; then
				echo -en "\\033[1;31mInstall operations unavailable for JAR files!`$SETCOLOR_NORMAL`"
				echo
				exit 1
			fi
		fi
	fi
else if [ "$OPERATION" = "decompile" ] || [ "$OPERATION" = "install_apk" ] || [ "$OPERATION" = "framework_install" ] || [ "$OPERATION" = "sign" ]; then
		echo -en "\\033[1;31mDecompile/sign/framework operations needs path to file, not to directory!`$SETCOLOR_NORMAL`"
		echo
		exit 1
	else 
		if [ "$bypass_check" = "no" ]; then
			check
			if [ "$OPERATION" = "build_install" ] ; then
				if [ "$(echo $input_file | awk -F. '{print $NF}')" = "jar" ] || [ "$(echo $input_file | awk -F. '{print $NF}')" != "JAR" ]; then
					echo -en "\\033[1;31mInstall operations unavailable for JAR files!`$SETCOLOR_NORMAL`"
					echo
					exit 1
				fi
			fi
		else
			echo -en "\\033[1;33mSource directory checks bypassed!`$SETCOLOR_NORMAL`"
			echo
		fi 
	fi
fi

echo `date` > $LOG
echo "Operation: $OPERATION" >> $LOG
echo "File: $input_file" >> $LOG

if [ "$input_file" != "" ]; then
	case $OPERATION in
		compile) echo "Operation: Compile $(echo $(cat ${input_file}/apktool.yml | grep apkFileName | awk '{print $2}') | awk -F. '{print $NF}')-file"; compile;;
		decompile) echo "Operation: Decompile $(echo $input_file | awk -F. '{print $NF}')-file"; decompile;;
		build) echo "Operation: Build $(echo $(cat ${input_file}/apktool.yml | grep apkFileName | awk '{print $2}') | awk -F. '{print $NF}')-file"; build;;
		build_install) echo "Operation: Build and Install apk-file"; build_install;;
		install_apk)  echo "Operation: Install apk-file"; install_apk;;
		patch_apk) echo "Operation: patch"; res=" "; src=" "; bypass_check="no"; patch_apk;;
		sign) echo "Operation: Sign file"; sign;;
		framework_install) echo "Operation: Install framework file"; framework_install;;
	esac
	echo
else
	echo "File [$input_file] does not exists!"
	exit 1
fi
exit 0