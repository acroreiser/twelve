#!/bin/bash
APKTOOL=/opt/twelve/apktool.jar
SIGNAPK=/opt/twelve/signapk.jar
PUPLIC_KEY=/opt/twelve/testkey.x509.pem
PRIVATE_KEY=/opt/twelve/testkey.pk8

VERSION=2.2

# Exclude from this array your preferred language(s) (excluded: "ru" "uk")
lang=("af" "am" "ar" "az" "ba" "be" "bg" "bn" "bs" "ca" "cs" "da" "de" "el" "en" "es" "et" "eu" "fa" "fi" "fr" "gl" "gu" "he" "hi" "hr" "hu" "hy" "id" "in" "it" "is" "iw" "ja" "ka" "ko" "kk" "km" "kn" "ky" "kz" "lo" "lt" "lv" "mk" "ml" "mn" "mr" "ms" "ne" "nb" "nl" "no" "pa" "pl" "pt" "rm" "ro" "si" "sk" "sl" "sq" "sr" "sv" "sw" "ta" "te" "tl" "th" "tr" "tt" "ur" "uz" "vi" "zh" "zu")
lngs=75 # -2

usage() {
	echo "Twelve $VERSION - a tiny wrapper for ApkTool, SignApk & ADB."
	echo "Written by A\$teroid <acroreiser@gmail.com>"
	echo ""
    echo "Usage:"
	echo "	twelve -d [-R] [-S] [-f] <file_apk> - decompile apk-file."
	echo "	-R             Do not decode resources."
	echo "	-S             Do not decode sources."
	echo "	-f             Force delete destination directory."
	echo 
	echo "	twelve -c [-f] <app_path> - compile apk-file."
	echo "	-f             Skip changes detection and forcefully build all files."
	echo
	echo "	twelve -F <framework.apk> - install framework. Do it before first operation with apk."
	echo "	twelve -s <apk_file> - sign apk-file."
	echo "	twelve -i <apk_file> - install apk-file on connected via USB (ADB) device."
	echo "	twelve -b [-f] <app_path> - compile & sign apk-file."
	echo "	twelve -I [-f] <app_path> - compile, sign & install apk-file on connected via USB (ADB) device."
	echo "	twelve -L [-U] <apk_file> - strip unneeded languages from apk-file."
	echo "	-U             Use /tmp/apkname folder for speed up strip operation"
	echo ""
	echo "	-m <heapsize>  Set Java heapsize(in megabytes) for operation (512 by default)" 
	echo "	-l			   Write log to twelve.log" 
	echo "	-B			   Bypass pre-compilation checks"
}

zh_langs_workaround() {
	mv $input_file2/res/values-zh $lngtmp &>>/dev/null
	mv $input_file2/res/values-zh-rCN $lngtmp &>>/dev/null
	mv $input_file2/res/values-zh-rHK $lngtmp &>>/dev/null
	
	if [ -e $input_file2/res/raw-${lang[$counter]} ];
	then
		mv $input_file2/res/raw-zh $lngtmp &>>/dev/null
	fi
	
	if [ -e $input_file2/res/xml-${lang[$counter]} ];
	then
		mv $input_file2/res/xml-zh $lngtmp &>>/dev/null
	fi
}

remove_lang() {
	cp $input_file2/res/values-${lang[$counter]}-* $lngtmp &>>/dev/null
	rm -fr $input_file2/res/values-${lang[$counter]}-*
	mv $input_file2/res/values-${lang[$counter]} $lngtmp &>>/dev/null
	
	if [ -e $input_file2/res/raw-${lang[$counter]} ];
	then
		mv $input_file2/res/raw-${lang[$counter]} $lngtmp &>>/dev/null
	fi
	
	if [ -e $input_file2/res/xml-${lang[$counter]} ];
	then
		mv $input_file2/res/xml-${lang[$counter]} $lngtmp &>>/dev/null
	fi
}

zh_wa_revert() {
	mv $lngtmp/values-zh $input_file2/res &>>/dev/null
	mv $lngtmp/values-zh-rCN $input_file2/res &>>/dev/null
	mv $lngtmp/values-zh-rHK $input_file2/res &>>/dev/null
	mv $lngtmp/values-zh-rTW $input_file2/res &>>/dev/null
}

revert_lang() {
	mv $lngtmp/values-${lang[$counter]} $input_file2/res &>>/dev/null
	cp $lngtmp/values-${lang[$counter]}-* $input_file2/res &>>/dev/null
	rm -rf $lngtmp/values-${lang[$counter]}-*
	
	if [ -e $lngtmp/raw-${lang[$counter]} ];
	then
		mv $lngtmp/raw-${lang[$counter]} $input_file2/res &>>/dev/null
	fi

	if [ -e $lngtmp/xml-${lang[$counter]} ];
	then
		mv $lngtmp/xml-${lang[$counter]} $input_file2/res &>>/dev/null
	fi
}


# !DEPRECATED
# Purge unwanted locales from package.
# Very ugle function, will be reworked.
language_purge() {
	echo "Purging languages..."
	echo "   File: $input_file"
	
	if [ "$tmpfs" == "yes" ]
	then
		dist=$input_file
		mkdir -n /tmp/twelve &>>/dev/null
		output_file=/tmp/twelve/$(rand)
		input_file2=$output_file
	else
		input_file2=$(echo $input_file | sed s/.apk//)
		output_file=$(echo $input_file | sed s/.apk//)
	fi
	
	java -jar -Xmx${MEM}m $APKTOOL d -s -o $output_file -f $input_file 1>>/dev/null
	
	if [ "$?" != "0" ]; then
		echo "----------"
		echo "DECOMPILATION FAILED"
		exit 7
	fi

	output_file2=$(echo $output_file/out.apk)
	lngtmp=$input_file2/langs_tmp
	mkdir $lngtmp
	counter=0

	while [ $counter -le $lngs ]
	do
		counter2=0
		while [ $counter2 -le 4 ]
		do
			if [[ -e $input_file2/res/values-${lang[$counter]} ]] ;
			then
				remove_lang
			fi
			let "counter += 1"
			let "counter2 += 1"
		done
		
		java -jar -Xmx${MEM}m $APKTOOL b -f $input_file2 -o $output_file2 &>>/dev/null
		
		if [ "$?" != "0" ]; 
		then
			let "counter -= 5"
			counter2=0
			while [ $counter2 -le 4 ]
			do
				if [[ -e $input_file2/res/values-${lang[$counter]} ]] ;
				then
					revert_lang
				fi
				let "counter += 1"
				let "counter2 += 1"
			done
		else
			rm $output_file2
		fi
	done
	
	java -jar -Xmx${MEM}m $APKTOOL b -f $input_file2 -o $output_file2 &>>/dev/null
	java -jar -Xmx${MEM}m $SIGNAPK $PUPLIC_KEY $PRIVATE_KEY $output_file2 $dist
	
	rm -fr $input_file2
	echo "   Done"
	exit 0
}

# Install framework resources
# It's needed for {de}compilation Android packages
framework_install() {
	echo "Framework: $input_file" >> $LOG
	java -jar -Xmx${MEM}m $APKTOOL if $input_file  &>> $LOG
	
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Framework: $input_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Framework $input_file failed!" >> $LOG
		echo
		exit 1
	fi
}

# Decompile package
decompile() {
	apkjar=$(echo $input_file | awk -F. '{print $NF}')
	output_file=$(echo $input_file | sed s/.$apkjar//)

	echo "Decompile: $input_file" >> $LOG
	java -jar -Xmx${MEM}m $APKTOOL d -o $output_file $src $force $res $input_file  &>> $LOG

	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Decompile: $input_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"

	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Decompiling $apkjar failed!" >> $LOG
		echo
		exit 1
	fi
	
	if [ "$GIT" = "yes" ]; then
		echo
		workingdir=$(pwd)
		echo "Initializing git repository..."
    	git init $output_file &>>$LOG
		cd $output_file
		git add .
		git commit -m "init" &>>$LOG
		cd $workingdir
	fi
}

# Check source directory before compilation
check() {
	if [ ! -f "${input_file}/apktool.yml" ]; then
		echo -en "	\\033[1;31mWrong decompiled apk|jar directory!`$SETCOLOR_NORMAL`"
		echo
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
		filename=$(cat ${input_file}/apktool.yml | grep apkFileName | awk '{print $2}')
		if [ -z "$filename" ]; then
			echo -en "	\\033[1;31mWrong decompiled apk|jar directory!`$SETCOLOR_NORMAL`"
			echo
			SETSTATUS=$SETCOLOR_FAILURE
		fi

		if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
			apkjar=$(echo $filename | awk -F. '{print $NF}')

			if [ "$apkjar" = "apk" ] && [ ! -f "${input_file}/AndroidManifest.xml" ]; then
				echo -en "	\\033[1;31mAndroid PacKage must have the AndroidManifest.xml!`$SETCOLOR_NORMAL`"
				echo
				SETSTATUS=$SETCOLOR_FAILURE
			fi
			
			if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
			
				if [ "$apkjar" = "apk" ] && [ ! -d "${input_file}/res"  ]; then
					echo -en "	\\033[1;33mAPK doesn't have resources?`$SETCOLOR_NORMAL`"
					echo
					if [ "$force" = "-f" ]; then
						echo -en "	\\033[1;33mProceeding forcefully...`$SETCOLOR_NORMAL`"
						echo
						SETSTATUS=$SETCOLOR_WARNING
					else
						echo "Use [-f] to proceed anyway"
						SETSTATUS=$SETCOLOR_FAILURE
					fi
				fi
				
				if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
					if [ "$apkjar" = "apk" ] && [ ! -d "${input_file}/smali"  ]; then
						echo -en "	\\033[1;33mAPK doesn't have sources!`$SETCOLOR_NORMAL`"
						echo
						echo "	Maybe it's framework-res or overlay?"
						SETSTATUS=$SETCOLOR_WARNING
					fi
	
					if [ "$SETSTATUS" != "$SETCOLOR_FAILURE" ]; then
					
						if [ "$apkjar" = "jar" ] && [ ! -d "${input_file}/smali"  ]; then
							echo -en "	\\033[1;33mJAR doesn't have code?`$SETCOLOR_NORMAL`"
							echo
							if [ "$force" = "-f" ]; then
								echo -en "	\\033[1;33mProceeding forcefully...`$SETCOLOR_NORMAL`"
								echo
								SETSTATUS=$SETCOLOR_WARNING
							else
								echo "Use [-f] to proceed anyway"
								SETSTATUS=$SETCOLOR_FAILURE
							fi
						fi
					fi
				fi
			fi
		fi
	fi
	
	echo -n "   Checking source directory  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	echo
	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		exit 1
	fi
}

# Just compile package
compile() {
	if [ "$bypass_check" = "no" ]; then
		check
	else
		echo -en "\\033[1;33mSource directory checks bypassed!`$SETCOLOR_NORMAL`"
		echo
	fi 
	
	source_dir=$input_file
	output_file=$(echo $input_file/$filename)
	
	echo "Source: $input_file"
	echo "Source: $input_file" >> $LOG
	echo "Compile $apkjar: $output_file" >> $LOG

	java -jar -Xmx${MEM}m $APKTOOL b $force $input_file -o $output_file  &>> $LOG
	
	if [ $? -eq 0 ]; then
		SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi

	echo -n "   Compile $apkjar: $output_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"

	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Compiling $apkjar failed!" >> $LOG
		echo
		exit 1
	fi
	
	echo "System $apkjar: $input_file" >> $LOG
	mkdir ${output_file%/*}/sys &>>/dev/null
	cp -a $output_file ${output_file%/*}/sys/$filename
	7za a -tzip ${output_file%/*}/sys/$filename ${output_file%/*}/original/* &>> $LOG

	if [ $? -eq 0 ]; then
		SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   System $apkjar: ${output_file%/*}/sys/$filename  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Creating system $apkjar failed!" >> $LOG
		echo
	fi
}

# Just sign file with testkey
sign() {	
	filename=$(echo $input_file | awk -F. '{print $NF}')
	output_file=$(echo $input_file | sed s/.$filename/-signed.$filename/)
	
	echo "Sign: $input_file" >> $LOG
	java -jar -Xmx${MEM}m $SIGNAPK $PUPLIC_KEY $PRIVATE_KEY $input_file $output_file  2>> $LOG
	
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Sign: $output_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
	if [ "$SETSTATUS" = "$SETCOLOR_FAILURE" ]; then
		echo "  Signing failed!" >> $LOG
		echo
		exit 3
	fi
}

# Compile and sign file
build() {
	echo "Build: $input_file" >> $LOG
	
	compile
	echo
	input_file=$output_file
	sign
	echo
	input_file=$output_file
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	filename=$(cat ${source_dir}/apktool.yml | grep apkFileName | awk '{print $2}')
	cp -a $input_file $source_dir/..
	rm -f $source_dir/$filename
	mv $input_file $source_dir/$filename
	echo -n "   Build: $(readlink -f $source_dir/../$filename)  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
}

# Compile, sign and install apk on connected via ADB device
build_install() {
	echo "Build + Install: $input_file" >> $LOG
	build
	install_apk
}

# Just install file on connected via ADB device (root access needed for adb)
install_apk() {
	echo "Install: $input_file" >> $LOG
	
	sudo adb install -r -d $input_file &>> $LOG
	
	if [ $? -eq 0 ]; then
    	SETSTATUS=$SETCOLOR_SUCCESS
	else
		SETSTATUS=$SETCOLOR_FAILURE
	fi
	
	echo -n "   Install: $input_file  $(tput hpa $(tput cols))$(tput cub 6)[`$SETSTATUS``$SETCOLOR_NORMAL`]"
}

# !!!! Entering TwelVe. !!!!
SETCOLOR_SUCCESS="echo -en \\033[1;32mOK"
SETCOLOR_FAILURE="echo -en \\033[1;31mERR"
SETCOLOR_WARNING="echo -en \\033[1;33mWARN"
SETCOLOR_NORMAL="echo -en \\033[0;39m"
SETSTATUS=$SETCOLOR_SUCCESS

# Preparing to work
OPERATION=
MEM=512
bypass_check="no"

while getopts "hdRUglfvBSm:cbsILiF" opt
do
case $opt in
	h) usage; exit 0;;
	v) echo $VERSION; exit 0;;
	R) res="-r";;
	S) src="-s";;
	f) force="-f";;
	B) bypass_check="yes";;
	U) tmpfs="yes";;
	g) GIT="yes";;
	l) LOGGING="yes";;
	m) MEM=$OPTARG;;
	L) OPERATION=lngpurge;;
	F) OPERATION=framework_install;;
	b) OPERATION=build;;
	c) OPERATION=compile;;
	I) OPERATION=build_install;;
	i) OPERATION=install_apk;;
	s) OPERATION=sign;;
	d) OPERATION=decompile;;
	*) usage; exit 0;;
esac
done

if [ "$#" -lt "2" ]; then
	usage
	exit 0
fi

if [ "$LOGGING" = "yes" ]; then
	LOG="$(pwd)/twelve.log"
else
	LOG="/dev/null"
fi
	
input_file=$(readlink -f ${@: -1} 2>>$LOG)


echo `date` > $LOG
echo "Operation: $OPERATION" >> $LOG
echo "File: $input_file" >> $LOG

echo "Twelve v$VERSION - a tiny wrapper for ApkTool, SignApk & ADB."

if [ "$input_file" != "" ]; then
	case $OPERATION in
		lngpurge) echo "Operation: Purge unneeded languages"; language_purge;;
		compile) echo "Operation: Compile $(echo $(cat ${input_file}/apktool.yml | grep apkFileName | awk '{print $2}') | awk -F. '{print $NF}')-file"; compile;;
		decompile) echo "Operation: Decompile $(echo $input_file | awk -F. '{print $NF}')-file"; decompile;;
		build) echo "Operation: Build $(echo $(cat ${input_file}/apktool.yml | grep apkFileName | awk '{print $2}') | awk -F. '{print $NF}')-file"; build;;
		build_install) echo "Operation: Build and Install apk-file"; build_install;;
		install_apk)  echo "Operation: Install apk-file"; install_apk;;
		sign) echo "Operation: Sign file"; sign;;
		framework_install) echo "Operation: Install framework file"; framework_install;;
	esac
	echo
else
	echo "File [$input_file] does not exists!"
	exit 1
fi
exit 0